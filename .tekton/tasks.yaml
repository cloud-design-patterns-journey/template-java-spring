---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: trivy-scanner
  labels:
    app.kubernetes.io/version: "0.2"
  annotations:
    tekton.dev/pipelines.minVersion: "0.12.1"
    tekton.dev/categories: Security
    tekton.dev/tags: CLI, trivy
    tekton.dev/displayName: "trivy scanner"
    tekton.dev/platforms: "linux/amd64"
spec:
  description: >-
    Trivy is a simple and comprehensive scanner for
    vulnerabilities in container images,file systems
    ,and Git repositories, as well as for configuration issues.

    This task can be used to scan for vulnenrabilities on the source code
    in stand alone mode.
  workspaces:
    - name: manifest-dir
  params:
    - name: ARGS
      description: The Arguments to be passed to Trivy command.
      type: array
    - name: TRIVY_IMAGE
      default: docker.io/aquasec/trivy@sha256:10e9175f16de79db502a10bf5ea815144102c93f16b52daa70be2f80806b5cad
      description: Trivy scanner image to be used
    - name: IMAGE_PATH
      description: Image or Path to be scanned by trivy.
      type: string
    - name: AIR_GAPPED_ENABLED
      default: "false"
      description: a flag enabling Air-Gapped mode
      type: string
  steps:
    - name: trivy-scan
      image: $(params.TRIVY_IMAGE)
      workingDir: $(workspaces.manifest-dir.path)
      script: |
        #!/usr/bin/env sh
          cmd="trivy $* "
          if [ "$(params.AIR_GAPPED_ENABLED)" = "true" ]; then
            echo "Air-Gapped mode enabled"
            TRIVY_TEMP_DIR=$(mktemp -d)
            trivy --cache-dir $TRIVY_TEMP_DIR image --download-db-only
            tar -cf ./db.tar.gz -C $TRIVY_TEMP_DIR/db metadata.json trivy.db
            rm -rf $TRIVY_TEMP_DIR
            mkdir -p $HOME/.cache/trivy/db
            tar xvf ./db.tar.gz -C $HOME/.cache/trivy/db
            cmd+="--skip-update "
          fi
          cmd="$cmd $(params.IMAGE_PATH)"
          echo "Running trivy task with command below"
          echo "$cmd"
          eval "$cmd"
      args:
        - "$(params.ARGS)"
---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: deploy
  labels:
    app.kubernetes.io/version: "0.0.1"
  annotations:
    tekton.dev/displayName: "Deploy"
    tekton.dev/platforms: "linux/amd64"
    description: Deploys the application to the CI environment for verification
spec:
  params:
    - name: app-name
      description: Application name
      type: string
    - name: app-port
      description: Port on which the application should run
      type: string
    - name: image
      description: Image to deploy
      type: string
    - name: step-image
      description: Image to run during the deploy step
      default: quay.io/cloudnativetoolkit/cli-tools:latest
      type: string
  workspaces:
    - name: source
      description: "Workspace containing the code which needs to be deployed"
  steps:
    - name: deploy
      image: $(params.step-image)
      script: |
        #!/usr/bin/env bash
        # Check for existing deployment
        if kubectl get deploy $(params.app-name) &> /dev/null; then
          echo "Deployment $(params.app-name) exists, updating image"
          kubectl set image deployment/$(params.app-name) $(params.app-name)=$(params.image)
        else
          echo "Creating deployment $(params.app-name)"
          kubectl create deploy $(params.app-name) --image $(params.image) --port $(params.app-port)
          kubectl expose deploy $(params.app-name) --port $(params.app-port)
          oc expose svc $(params.app-name)
        fi
        kubectl wait --timeout=60s --for=condition=Available deploy/$(params.app-name)
