---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: inv-svc-ns
  annotations:
    # The event we are targeting as seen from the webhook payload
    # this can be an array too, i.e: [push]
    pipelinesascode.tekton.dev/on-event: "[pull_request, push]"

    # The branch or tag we are targeting (ie: main, refs/tags/*)
    pipelinesascode.tekton.dev/on-target-branch: "[main]"

    # Fetch the git-clone task from hub, we are able to reference later on it
    # with taskRef and it will automatically be embedded into our pipeline.
    pipelinesascode.tekton.dev/task: "[git-clone, buildah]"

    # How many runs we want to keep attached to this event
    pipelinesascode.tekton.dev/max-keep-runs: "5"
spec:
  params:
    - name: repo_url
      value: "{{ repo_url }}"
    - name: revision
      value: "{{ revision }}"
    - name: app-name
      value: "{{ repo_name }}"
    - name: img-server
      value: "{{ img-server }}"
    - name: img-namespace
      value: "{{ img-namespace }}"
    - name: build-tls-verify
      value: "false" # set to false if using insecure image registry
    - name: img-scan-args
      value:
        - "image"
        - "--exit-code"
        - "1"
        - "--ignore-unfixed"
        - "--severity"
        - "CRITICAL"
        - "--insecure" # uncomment if using insecure image registry
  pipelineSpec:
    params:
      - name: app-name
        description: Application name
        type: string
      - name: app-port
        description: Port on which the application should run
        type: string
        default: 8080
      - name: repo_url
      - name: revision
      - name: img-server
        description: Destination registry server for built image (quay.io, docker.io, ...)
        type: string
      - name: img-namespace
        description: Destination registry namespace for built image (e.g quay username/organisation)
        type: string
      - name: build-tls-verify
        default: "true"
        description: >-
          Verify the TLS on the registry endpoint (for push/pull to a non-TLS
          registry)
        type: string
      - name: img-scan-args
        default:
          - image
          - "--exit-code"
          - "1"
          - "--severity"
          - "HIGH,CRITICAL"
        description: The Arguments to be passed to the Trivy scan command
        type: array
    tasks:
      - name: fetch-repository
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: shared-data
          - name: basic-auth
            workspace: basic-auth
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
      - name: img-build
        params:
          - name: IMAGE
            value: >-
              $(params.img-server)/$(params.img-namespace)/$(params.app-name):$(tasks.fetch-repository.results.commit)
          - name: TLSVERIFY
            value: $(params.build-tls-verify)
        runAfter:
          - fetch-repository
        taskRef:
          name: buildah
        workspaces:
          - name: source
            workspace: shared-data
          - name: dockerconfig
            workspace: registry-config
      - name: img-scan
        params:
          - name: IMAGE_PATH
            value: >-
              $(params.img-server)/$(params.img-namespace)/$(params.app-name):$(tasks.fetch-repository.results.commit)
          - name: ARGS
            value:
              - "$(params.img-scan-args[*])"
        runAfter:
          - img-build
        taskRef:
          kind: Task
          name: trivy-scanner
        workspaces:
          - name: manifest-dir
            workspace: manifest-dir
      - name: deploy
        params:
          - name: app-name
            value: $(params.app-name)
          - name: app-port
            value: $(params.app-port)
          - name: image
            value: $(params.img-server)/$(params.img-namespace)/$(params.app-name):$(tasks.fetch-repository.results.commit)
        runAfter:
          - img-scan
        taskRef:
          kind: Task
          name: deploy
        workspaces:
          - name: source
            workspace: shared-data
    workspaces:
      - name: shared-data
      - name: registry-config
      - name: manifest-dir
  workspaces:
    - name: shared-data
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
    - name: registry-config
      secret:
        secretName: registry-config
    - name: manifest-dir
      emptyDir: {}
    # This workspace will inject secret to help the git-clone task to be able to
    # checkout the private repositories
    - name: basic-auth
      secret:
        secretName: "{{ git_auth_secret }}"
